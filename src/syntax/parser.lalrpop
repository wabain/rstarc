use syntax::lexer::{self, Token};
use syntax::ast;

grammar<'input>();

pub Program: Vec<ast::Statement<'input>> = {
    "\n"* <t:(TermStatement "\n"*)*> EOF =>
        t.into_iter().map(|(s, _)| s).collect::<Vec<_>>(),
}

TermStatement: ast::Statement<'input> = {
    <start:@L> <s:Statement> <end:@R> "\n" =>
        ast::Statement { kind: s, pos: ast::Pos(start, end) },
}

Statement: ast::StatementKind<'input> = {
    "Put" <e:Expr> "Into" <v:LValue> => ast::StatementKind::Assign(v, e),

    // The spec talks about "Literal Words" being allowed here without defining
    // the term, but its examples show numeric literals being allowed, so I'm
    // taking it to mean any literal
    <v:LValue> "Is" <e:Literal> => ast::StatementKind::Assign(v, e),
    <v:LValue> "Was" <e:Literal> => ast::StatementKind::Assign(v, e),

    "Build" <v:LValue> <count:IncrCount> => ast::StatementKind::Incr(v, count),
    "Knock" <v:LValue> <count:DecrCount> => ast::StatementKind::Decr(v, count),
    "Say" <e:Expr> => ast::StatementKind::Say(e),

    "Continue" => ast::StatementKind::Continue,
    "Break" => ast::StatementKind::Break,
    "Give" "Back" <e:Expr> => ast::StatementKind::Return(e),

    "If" <c:Expr> "\n" <b:Block> <els:("Else" "\n" Block)?> => {
        let else_block = els.map_or_else(|| Vec::new(), |(_, _, b2)| b2);
        ast::StatementKind::Condition(c, b, else_block)
    },

    "While" <c:Expr> "\n" <b:Block> => ast::StatementKind::While(c, b),
    "Until" <c:Expr> "\n" <b:Block> => ast::StatementKind::Until(c, b),
    <v:Variable> "Takes" <a:FuncDecArgs> "\n" <b:Block> =>
        ast::StatementKind::FuncDef(v, a, b),
}

IncrCount: u32 = {
    "Up" => 1,
    "Up" "," <c:IncrCount> => c + 1,
    "Up" <c:IncrCount> => c + 1,
}

DecrCount: u32 = {
    "Down" => 1,
    "Down" "," <c:DecrCount> => c + 1,
    "Down" <c:DecrCount> => c + 1,
}

FuncDecArgs: Vec<ast::Variable<'input>> = {
    <v:(Variable FuncDecSep)*> <e:Variable?> => {
        let mut vars: Vec<_> = v.into_iter().map(|(var, _)| var).collect();
        if let Some(e) = e {
            vars.push(e);
        }
        vars
    }
}

FuncDecSep: () = {
    "And" => (),
    "," => (),
}

Block: Vec<ast::Statement<'input>> = {
    <b:TermStatement*> => b
}

// Function calls are not allowed before "and" comparisons to prevent ambiguity
Expr: ast::Expr<'input> = {
    <e1:PreConjunctionComparisonExpr> "And" <e2:Expr> =>
        ast::Expr::logical(ast::Logical::And(e1, e2)),
    <e1:ComparisonExpr> "Or" <e2:Expr> =>
        ast::Expr::logical(ast::Logical::Or(e1, e2)),
    <e1:ComparisonExpr> "Nor" <e2:Expr> =>
        ast::Expr::logical(ast::Logical::Nor(e1, e2)),
    ComparisonExpr => <>,
}

ComparisonExpr: ast::Expr<'input> = {
    <a:AddExpr> <cmp:Comparator> <b:ComparisonExpr> =>
        ast::Expr::compare(ast::Comparison(a, cmp, b)),
    AddExpr => <>,
}

PreConjunctionComparisonExpr: ast::Expr<'input> = {
    <a:AddExpr> <cmp:Comparator> <b:PreConjunctionComparisonExpr> =>
        ast::Expr::compare(ast::Comparison(a, cmp, b)),
    PreConjunctionAddExpr => <>,
}

Comparator: ast::Comparator = {
    "Is" => ast::Comparator::Is,
    "Isn't" => ast::Comparator::IsNot,
    "Is" "Greater" "Than" => ast::Comparator::IsGreaterThan,
    "Is" "Less" "Than" => ast::Comparator::IsLessThan,
    "Is" "As" "Great" "As" => ast::Comparator::IsAsGreatAs,
    "Is" "As" "Little" "As" => ast::Comparator::IsAsLittleAs,
}

AddExpr: ast::Expr<'input> = {
    MultExpr => <>,
    <e1:MultExpr> "Plus" <e2:AddExpr> => ast::Expr::Add(Box::new(e1), Box::new(e2)),
    <e1:MultExpr> "Minus" <e2:AddExpr> => ast::Expr::Sub(Box::new(e1), Box::new(e2)),
}

PreConjunctionAddExpr: ast::Expr<'input> = {
    PreConjunctionMultExpr => <>,
    <e1:MultExpr> "Plus" <e2:PreConjunctionAddExpr> => ast::Expr::Add(Box::new(e1), Box::new(e2)),
    <e1:MultExpr> "Minus" <e2:PreConjunctionAddExpr> => ast::Expr::Sub(Box::new(e1), Box::new(e2)),
}

MultExpr: ast::Expr<'input> = {
    NotExpr => <>,
    <e1:NotExpr> "Times" <e2:MultExpr> => ast::Expr::Mul(Box::new(e1), Box::new(e2)),
    <e1:NotExpr> "Over" <e2:MultExpr> => ast::Expr::Div(Box::new(e1), Box::new(e2)),
}

PreConjunctionMultExpr: ast::Expr<'input> = {
    PreConjunctionNotExpr => <>,
    <e1:NotExpr> "Times" <e2:PreConjunctionMultExpr> => ast::Expr::Mul(Box::new(e1), Box::new(e2)),
    <e1:NotExpr> "Over" <e2:PreConjunctionMultExpr> => ast::Expr::Div(Box::new(e1), Box::new(e2)),
}

NotExpr: ast::Expr<'input> = {
    "Not" <e:FuncCallExpr> => ast::Expr::logical(ast::Logical::Not(e)),
    FuncCallExpr => <>,
}

PreConjunctionNotExpr: ast::Expr<'input> = {
    "Not" <e:SimpleExpr> => ast::Expr::logical(ast::Logical::Not(e)),
    SimpleExpr => <>,
}

FuncCallExpr: ast::Expr<'input> = {
    <f:SimpleExpr> "Taking" <a:(SimpleExpr FuncArgSep)*> <an:SimpleExpr> => {
        let mut args: Vec<_> = a.into_iter().map(|(e, _)| Box::new(e)).collect();
        args.push(Box::new(an));
        ast::Expr::FuncCall(Box::new(f), args)
    },
    SimpleExpr => <>,
}

FuncArgSep: () = {
    "," => (),
    "And" => (),
}

SimpleExpr: ast::Expr<'input> = {
    LValue => ast::Expr::LValue(<>),
    Literal => <>,
}

Literal: ast::Expr<'input> = {
    TStringLiteral => ast::Expr::Literal(<>),
    TBooleanLiteral => ast::Expr::Literal(<>),
    TNumberLiteral => ast::Expr::Literal(<>),
    TMysteriousLiteral => ast::Expr::Literal(<>),
    TNullLiteral => ast::Expr::Literal(<>),
}

LValue: ast::LValue<'input> = {
    Variable => ast::LValue::Variable(<>),
    TPronoun => ast::LValue::Pronoun(<>),
}

Variable: ast::Variable<'input> = {
    <start:@L> <v:TProperVar> <end:@R> =>
        ast::Variable::ProperVar(v, ast::Pos(start, end)),
    <start:@L> <p:TCommonPrep> <v:TCommonVar> <end:@R> =>
        ast::Variable::CommonVar(p, v, ast::Pos(start, end)),
}

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum Token<'input> {
        // Variables and friends
        TProperVar => Token::ProperVar(_),
        TCommonVar => Token::CommonVar(_),
        TPronoun => Token::Pronoun(_),
        TCommonPrep => Token::CommonPrep(_),

        // Types
        TStringLiteral => Token::StringLiteral(_),
        TBooleanLiteral => Token::BooleanLiteral(_),
        TNumberLiteral => Token::NumberLiteral(_),
        TMysteriousLiteral => Token::MysteriousLiteral,
        TNullLiteral => Token::NullLiteral,

        // Punctuation
        "\n" => Token::Newline,
        "," => Token::Comma,

        // Other keywords
        "Is" => Token::Keyword(lexer::Keyword::Is),
        "Was" => Token::Keyword(lexer::Keyword::Was),
        "Not" => Token::Keyword(lexer::Keyword::Not),
        "Isn't" => Token::Keyword(lexer::Keyword::Isnt),
        "Than" => Token::Keyword(lexer::Keyword::Than),
        "As" => Token::Keyword(lexer::Keyword::As),
        "Greater" => Token::Keyword(lexer::Keyword::Greater),
        "Less" => Token::Keyword(lexer::Keyword::Less),
        "Great" => Token::Keyword(lexer::Keyword::Great),
        "Little" => Token::Keyword(lexer::Keyword::Little),
        "Put" => Token::Keyword(lexer::Keyword::Put),
        "Into" => Token::Keyword(lexer::Keyword::Into),
        "Build" => Token::Keyword(lexer::Keyword::Build),
        "Up" => Token::Keyword(lexer::Keyword::Up),
        "Knock" => Token::Keyword(lexer::Keyword::Knock),
        "Down" => Token::Keyword(lexer::Keyword::Down),
        "Plus" => Token::Keyword(lexer::Keyword::Plus),
        "Minus" => Token::Keyword(lexer::Keyword::Minus),
        "Times" => Token::Keyword(lexer::Keyword::Times),
        "Over" => Token::Keyword(lexer::Keyword::Over),
        "Listen" => Token::Keyword(lexer::Keyword::Listen),
        "To" => Token::Keyword(lexer::Keyword::To),
        "Say" => Token::Keyword(lexer::Keyword::Say),
        "If" => Token::Keyword(lexer::Keyword::If),
        "Else" => Token::Keyword(lexer::Keyword::Else),
        "While" => Token::Keyword(lexer::Keyword::While),
        "Until" => Token::Keyword(lexer::Keyword::Until),
        "Continue" => Token::Keyword(lexer::Keyword::Continue),
        "Break" => Token::Keyword(lexer::Keyword::Break),
        "Takes" => Token::Keyword(lexer::Keyword::Takes),
        "Taking" => Token::Keyword(lexer::Keyword::Taking),
        "Take" => Token::Keyword(lexer::Keyword::Take),
        "From" => Token::Keyword(lexer::Keyword::From),
        "Give" => Token::Keyword(lexer::Keyword::Give),
        "Back" => Token::Keyword(lexer::Keyword::Back),
        "And" => Token::Keyword(lexer::Keyword::And),
        "Or" => Token::Keyword(lexer::Keyword::Or),
        "Nor" => Token::Keyword(lexer::Keyword::Nor),

        EOF => Token::EOF,
    }
}
