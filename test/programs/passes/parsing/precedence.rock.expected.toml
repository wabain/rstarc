[tests]
enabled = ["ast"]

[ast]
returncode = "0"
stdout = """
Assign(
  ProperVar("U" borrowed),
  NumberLiteral(0.0),
),
Assign(
  ProperVar("V" borrowed),
  NumberLiteral(0.0),
),
Assign(
  ProperVar("W" borrowed),
  NumberLiteral(0.0),
),
Assign(
  ProperVar("X" borrowed),
  NumberLiteral(0.0),
),
Assign(
  ProperVar("Y" borrowed),
  NumberLiteral(0.0),
),
Assign(
  ProperVar("Z" borrowed),
  NumberLiteral(0.0),
),
Assign(
  ProperVar("Dummy" borrowed),
  Add(
    Mul(
      Not(
        FuncCall(
          ProperVar("X" borrowed),
          [
            ProperVar("Y" borrowed),
            ProperVar("Z" borrowed),
          ],
        ),
      ),
      ProperVar("U" borrowed),
    ),
    ProperVar("V" borrowed),
  ),
),
Assign(
  ProperVar("Dummy" borrowed),
  Add(
    ProperVar("X" borrowed),
    Sub(
      ProperVar("Y" borrowed),
      ProperVar("Z" borrowed),
    ),
  ),
),
Assign(
  ProperVar("Dummy" borrowed),
  Mul(
    ProperVar("X" borrowed),
    Div(
      ProperVar("Y" borrowed),
      ProperVar("Z" borrowed),
    ),
  ),
),
If(
  Comparison(
    Mul(
      ProperVar("X" borrowed),
      ProperVar("Y" borrowed),
    ),
    Is,
    Add(
      ProperVar("Z" borrowed),
      ProperVar("U" borrowed),
    ),
  ),
  [
    Say(
      NullLiteral,
    ),
  ],
  [
  ],
),
If(
  And(
    Comparison(
      ProperVar("U" borrowed),
      Is,
      Comparison(
        Mul(
          ProperVar("V" borrowed),
          FuncCall(
            ProperVar("X" borrowed),
            [
              ProperVar("Y" borrowed),
              ProperVar("Z" borrowed),
            ],
          ),
        ),
        Is,
        ProperVar("V" borrowed),
      ),
    ),
    Comparison(
      ProperVar("W" borrowed),
      Is,
      ProperVar("X" borrowed),
    ),
  ),
  [
    Say(
      NullLiteral,
    ),
  ],
  [
  ],
),
"""
