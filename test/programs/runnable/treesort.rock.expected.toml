[tests]
enabled = ["run", "ir"]

[run]
returncode = "0"
stdout = """
822
4805
9117
10097
10402
13586
20636
24037
24805
32533
34673
37542
39292
54876
64894
74296
74945
76520
80959
91665
"""

[ir]
returncode = "0"
stdout = """
global Inorder<0>
global Insertnode<0>
global Makenode<0>
global Nodeoperationread<0>
global Nodeoperationwrite<0>
global Nodevalueignored<0>
global Nodevariableleft<0>
global Nodevariableright<0>
global Nodevariablevalue<0>
global Unusedreturnvalue<0>

main:
  Main := store mysterious
  Nodeoperationread<0> := store 0
  Nodeoperationwrite<0> := store 1
  Nodevalueignored<0> := store 0
  Nodevariablevalue<0> := store 0
  Nodevariableleft<0> := store 1
  Nodevariableright<0> := store 2
  Makenode<0> := store Function(1)
  Insertnode<0> := store Function(3)
  Inorder<0> := store Function(4)
  Main := store Function(5)
  Unusedreturnvalue<0> := call Main, [null]
  return-default

;
; Function Node takes Operation, Variable, Newvalue
; Captures closure<1> using Left<1>, Right<1>, Value<1>
; Scope is 2
;
f2_Node:
  Newvalue := load-arg 2
  Operation := load-arg 0
  Variable := load-arg 1
  t0 := is Operation, Nodeoperationread<0>
  jumpif t0, .then0, .else1
.then0:
  t1 := is Variable, Nodevariablevalue<0>
  jumpif t1, .then2, .else3
.then2:
  return closure.Value<1>
.else3:
  t2 := is Variable, Nodevariableleft<0>
  jumpif t2, .then4, .else5
.then4:
  return closure.Left<1>
.else5:
  t3 := is Variable, Nodevariableright<0>
  jumpif t3, .then6, .else7
.then6:
  return closure.Right<1>
.else7:
  jump .else1
.else1:
  t4 := is Operation, Nodeoperationwrite<0>
  jumpif t4, .then8, .else9
.then8:
  t5 := is Variable, Nodevariablevalue<0>
  jumpif t5, .then10, .else11
.then10:
  closure.Value<1> := store Newvalue
  jump .else11
.else11:
  t6 := is Variable, Nodevariableleft<0>
  jumpif t6, .then12, .else13
.then12:
  closure.Left<1> := store Newvalue
  jump .else13
.else13:
  t7 := is Variable, Nodevariableright<0>
  jumpif t7, .then14, .else15
.then14:
  closure.Right<1> := store Newvalue
  jump .else15
.else15:
  jump .else9
.else9:
  return-default

;
; Function Makenode takes closure.Value<1>, closure.Left<1>, closure.Right<1>
; Closure has Left, Right, Value
; Scope is 1
;
f1_Makenode:
  closure.Left<1> := load-arg 1
  Node := store mysterious
  closure.Right<1> := load-arg 2
  closure.Value<1> := load-arg 0
  Node := store Function(2)
  return Node

;
; Function Insertnode takes Node, Newvalue
; Scope is 3
;
f3_Insertnode:
  Direction := store mysterious
  Newnode := store mysterious
  Newvalue := load-arg 1
  Node := load-arg 0
  Originalroot := store mysterious
  Parentnode := store mysterious
  Value := store mysterious
  Newnode := call Makenode<0>, [Newvalue, null, null]
  t0 := is Node, null
  jumpif t0, .then0, .else1
.then0:
  return Newnode
.else1:
  Originalroot := store Node
  Parentnode := store null
  Direction := store Nodevariableright<0>
  jump .loop_check2
.loop_check2:
  t1 := is-not Node, null
  jumpif t1, .loop_start3, .loop_end4
.loop_start3:
  Value := call Node, [Nodeoperationread<0>, Nodevariablevalue<0>, Nodevalueignored<0>]
  Direction := store Nodevariableright<0>
  t2 := lt Newvalue, Value
  jumpif t2, .then5, .else6
.then5:
  Direction := store Nodevariableleft<0>
  jump .else6
.else6:
  Parentnode := store Node
  Node := call Node, [Nodeoperationread<0>, Direction, Nodevalueignored<0>]
  jump .loop_check2
.loop_end4:
  Unusedreturnvalue<0> := call Parentnode, [Nodeoperationwrite<0>, Direction, Newnode]
  return Originalroot

;
; Function Inorder takes Node
; Scope is 4
;
f4_Inorder:
  Left := store mysterious
  Node := load-arg 0
  Right := store mysterious
  Value := store mysterious
  t0 := is Node, null
  jumpif t0, .then0, .else1
.then0:
  return null
.else1:
  Left := call Node, [Nodeoperationread<0>, Nodevariableleft<0>, Nodevalueignored<0>]
  Unusedreturnvalue<0> := call Inorder<0>, [Left]
  Value := call Node, [Nodeoperationread<0>, Nodevariablevalue<0>, Nodevalueignored<0>]
  say Value
  Right := call Node, [Nodeoperationread<0>, Nodevariableright<0>, Nodevalueignored<0>]
  Unusedreturnvalue<0> := call Inorder<0>, [Right]
  return null

;
; Function Main takes Root
; Scope is 5
;
f5_Main:
  Root := load-arg 0
  Root := call Insertnode<0>, [Root, 10097]
  Root := call Insertnode<0>, [Root, 32533]
  Root := call Insertnode<0>, [Root, 76520]
  Root := call Insertnode<0>, [Root, 13586]
  Root := call Insertnode<0>, [Root, 34673]
  Root := call Insertnode<0>, [Root, 54876]
  Root := call Insertnode<0>, [Root, 80959]
  Root := call Insertnode<0>, [Root, 9117]
  Root := call Insertnode<0>, [Root, 39292]
  Root := call Insertnode<0>, [Root, 74945]
  Root := call Insertnode<0>, [Root, 37542]
  Root := call Insertnode<0>, [Root, 4805]
  Root := call Insertnode<0>, [Root, 64894]
  Root := call Insertnode<0>, [Root, 74296]
  Root := call Insertnode<0>, [Root, 24805]
  Root := call Insertnode<0>, [Root, 24037]
  Root := call Insertnode<0>, [Root, 20636]
  Root := call Insertnode<0>, [Root, 10402]
  Root := call Insertnode<0>, [Root, 822]
  Root := call Insertnode<0>, [Root, 91665]
  Unusedreturnvalue<0> := call Inorder<0>, [Root]
  return-default
"""
